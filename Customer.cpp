//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Final_Project_2
//  @ File Name : Customer.cpp
//  @ Date : 25/04/2020
//  @ Author : Vy Huynh and Kim Nguyen and Arooj
//
//


#include "Customer.h"
#include "Account.h"

Customer::Customer() : Customer{0, "None"} {//Default constructor with no args
	cout << "A customer has been created missing an ID and a name." << endl;
}

Customer::Customer(int newCustomerId) : Customer{newCustomerId, "None"} {//Overloaded constructor with one arg is customer ID
	cout << "A customer has been created missing a name." << endl;
}

Customer::Customer(string newCustomerName) : Customer{0, newCustomerName} {//Overloaded constructor with one arg is customer ID
	cout << "A customer has been created missing an ID." << endl;
}

Customer::Customer(int newCustomerId, string newCustomerName) : customerId{ newCustomerId }, customerName{ newCustomerName } {//Overloaded constructor with two args
	cout << "A customer has been created successfully." << endl;
}


Customer::~Customer() {//Destructor
}

void Customer::setCustomerId(int newCustomerId) {
	customerId = newCustomerId;
}

int Customer::getCustomerId() const
{
	return customerId;
}


void Customer::setCustomerName(string newCustomerName) {
	newCustomerName = customerName;
}

string Customer::getCustomerName() const
{
	return customerName;
}

void Customer::addAccount(Account& account)
{
	// Our doctor will add this patient
	m_account.push_back(account);
}

std::ostream& operator<<(std::ostream& out, const Customer& customer)
{

	if (customer.m_account.empty())
	{
		out << customer.customerName << " has no accounts right now";
		return out;
	}

	out << customer.customerName << " has accounts: ";
	for (const auto& Account : customer.m_account)
		out << Account.get().getAccountId() << " || ";

	return out;
}
